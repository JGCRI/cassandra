#!usr/bin/env python
"""Test the gcam queries used by the automation system on a specified db file

Usage:  gcquery-test.py <dbfile>
"""

import sys
import os.path
import unittest

## set dbfile to use for testing
try:
    dbfile = sys.argv[1] #Current dbfile is 'RCP4_5_2040.xml'. 
except IndexError:
    sys.exit('Error: no dbfile specified.\nUsage:  %s <dbfile>\n'%sys.argv[0])
    



## enable this code to run from the gcam/test/ directory
sys.path.append('../..')

from gcam import util
from gcam.modules import GlobalParamsModule
from gcam.water import waterdisag

#Test Class
class testQueries(unittest.TestCase):
	def setUp(self):		
	## Set up the global parameters module (which is used by some of the
	## utility functions).
		self.genparams = {"DBXMLlib" : "/people/pralitp/libs/dbxml-2.5.16/install/lib",
        	     'inputdir' : './../../../input-data',
            	     'rgnconfig' : 'rgnchn', 
		     "ModelInterface" : "./../../../../ModelInterface/ModelInterface.jar"
            	     } 
		self.global_params = GlobalParamsModule({})
		for key in self.genparams.keys():
    			self.global_params.addparam(key, self.genparams[key])
	
		self.global_params.run()

		self.queryfiles = ['batch-land-alloc.xml', 'batch-population.xml', 'batch-water-ag.xml',
              		'batch-water-dom.xml', 'batch-water-elec.xml', 'batch-water-livestock.xml',
              		'batch-water-mfg.xml', 'batch-water-mining-alt.xml']
				
		## add the directory path to the query files
		self.querydir   = '../../../input-data/'
		self.queryfiles = map(lambda file: querydir + file, self.queryfiles)
		self.dbfile = 'RCP4_5_2040.xml' #This is the dbfile I'm using in my test directory. 
		
		self.outfiles = ['batch-land-alloc.csv', 'batch-population.csv', 'batch-water-ag.csv',
              		'batch-water-dom.csv', 'batch-water-elec.csv', 'batch-water-livestock.csv',
              		'batch-water-mfg.csv', 'batch-water-mining.csv']

		self.outfiles = map(lambda file: 'output/' + file, self.outfiles)

	def testInit_rgn_tables(self):
		"""Check that global variables generated by init_rgn_tables exist and are
		of the correct type."""
		## set up the region tables for the waterdisag module
		rgnconfdir = os.path.join(self.genparams['inputdir'],self.genparams['rgnconfig'])
		waterdisag.init_rgn_tables(rgnconfdir)
		
				
		##Test global variable type and length (ensure that it correctly corresponds to csv files
		self.assertIs(type(waterdisag._regions_ordered), list)
		self.assertEqual(len(waterdisag._regions_ordered), 65)	

		self.assertIs(type(waterdisag._gis2000), dict)
		self.assertEqual(len(waterdisag._gis2000),64) 

		self.assertIs(type(waterdisag._bfracFAO2005), dict)
		self.assertEqual(len(waterdisag._bfracFAO2005), 32)
	 		
		self.assertIs(type(waterdisag._gfracFAO2005), dict)
		self.assertIs(len(waterdisag._gfracFAO2005), 32)
		
		self.assertIs(type(waterdisag._gcam_rgn_translation), dict)
		self.assertEqual(len(waterdisag._gcam_rgn_translation), 33)

	def testProc_wdnonag(self):
		"""Test the function proc_wdnonag."""
		#Note: in progress, has issues with dbfile.

		#Set up query files			
		of_new = util.gcam_query(self.queryfiles, self.dbfile, self.querydir, self.outfiles)

		### process the non-ag water
		wd_elec = waterdisag.proc_wdnonag('output/batch-water-elec.csv', 'output/final_wd_elec.csv')
		wd_mfg  = waterdisag.proc_wdnonag('output/batch-water-mfg.csv', 'output/final_wd_mfg.csv')
		wd_min  = waterdisag.proc_wdnonag('output/batch-water-mining.csv', 'output/final_wd_mining.csv') 
		wd_tot  = waterdisag.proc_wdnonag_total('output/final_wd_total.csv', wd_dom, wd_elec, wd_mfg, wd_min)
		wd_dom  = waterdisag.proc_wdnonag('output/batch-water-dom.csv', 'output/final_wd_dom.csv')
		
		
			


if __name__ == '__main__': 
	unittest.main()




### process livestock water demand
#wd_liv  = waterdisag.proc_wdlivestock('output/batch-water-livestock.csv', 'output/final_wd_liv.csv',
#                                      'output/rgn_tot_withd_liv.csv')
#
### process ag water demand
#irrS    = waterdisag.proc_irr_share('output/irrigation-frac.csv', 'output/irrS.csv')
### no tables returned by these next two.  Maybe we should return them for consistency?
#waterdisag.proc_ag_area('output/batch-land-alloc.csv', 'output/final_ag_area.csv')
#waterdisag.proc_ag_vol('output/batch-water-ag.csv', 'output/final_wd_ag.csv')

